{
  "name": "stampit",
  "version": "3.0.2",
  "description": "Create objects from reusable, composable behaviors.",
  "author": {
    "name": "Eric Elliott",
    "url": "https://ericelliottjs.com"
  },
  "main": "dist/stampit.full.js",
  "jsnext:main": "dist/stampit.mjs",
  "browser": "dist/stampit.umd.js",
  "keywords": [
    "object",
    "prototype",
    "object oriented",
    "browser",
    "inheritance",
    "oop",
    "node",
    "factory",
    "class",
    "stamp"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:stampit-org/stampit.git"
  },
  "dependencies": {},
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-eslint": "^7.0.0",
    "babel-plugin-check-es2015-constants": "^6.8.0",
    "babel-plugin-transform-es2015-arrow-functions": "^6.8.0",
    "babel-plugin-transform-es2015-block-scoped-functions": "^6.8.0",
    "babel-plugin-transform-es2015-block-scoping": "^6.15.0",
    "babel-plugin-transform-es2015-classes": "^6.14.0",
    "babel-plugin-transform-es2015-computed-properties": "^6.8.0",
    "babel-plugin-transform-es2015-destructuring": "^6.9.0",
    "babel-plugin-transform-es2015-duplicate-keys": "^6.8.0",
    "babel-plugin-transform-es2015-for-of": "^6.8.0",
    "babel-plugin-transform-es2015-function-name": "^6.9.0",
    "babel-plugin-transform-es2015-literals": "^6.8.0",
    "babel-plugin-transform-es2015-object-super": "^6.8.0",
    "babel-plugin-transform-es2015-parameters": "^6.9.0",
    "babel-plugin-transform-es2015-shorthand-properties": "^6.8.0",
    "babel-plugin-transform-es2015-spread": "^6.8.0",
    "babel-plugin-transform-es2015-sticky-regex": "^6.8.0",
    "babel-plugin-transform-es2015-template-literals": "^6.8.0",
    "babel-plugin-transform-es2015-typeof-symbol": "^6.8.0",
    "babel-plugin-transform-es2015-unicode-regex": "^6.8.0",
    "babel-plugin-transform-regenerator": "^6.14.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-runtime": "^6.9.2",
    "check-compose": "^3.2.0",
    "dependency-check": "^2.5.0",
    "eslint": "^3.5.0",
    "eslint-config-airbnb-base": "8.0.0",
    "eslint-plugin-import": "^1.15.0",
    "isparta": "^4.0.0",
    "lodash": "^4.16.1",
    "magic-string": "^0.16.0",
    "nsp": "^2.1.0",
    "require-all": "^2.0.0",
    "rimraf": "^2.3.4",
    "rollup": "^0.36.0",
    "rollup-plugin-babel": "^2.4.0",
    "rollup-plugin-filesize": "^1.0.0",
    "rollup-plugin-uglify": "^1.0.0",
    "tape": "^4.2.2",
    "watch": "^0.19.2"
  },
  "scripts": {
    "cov": "npm run cov:clean && npm run cov:generate",
    "cov:clean": "rimraf ./coverage/",
    "cov:generate": "babel-node ./node_modules/.bin/isparta cover --report text --report html test/index.js",
    "prepublish": "npm run check",
    "pretest": "npm run build",
    "test": "babel-node test && npm run lint",
    "clean": "rimraf dist/* && mkdir dist || true",
    "lint": "eslint src && eslint test",
    "prebuild": "npm run clean",
    "build": "babel-node build",
    "deps": "npm run deps:missing && npm run deps:extra",
    "deps:missing": "dependency-check package.json",
    "deps:extra": "dependency-check package.json --extra --no-dev --ignore",
    "audit": "nsp check",
    "precheck": "npm test",
    "check": "npm run audit && npm run deps && npm outdated --depth 0",
    "watch": "watch 'clear && npm -s test' test/ src/"
  },
  "license": "MIT",
  "npmName": "stampit",
  "npmFileMap": [
    {
      "basePath": "/dist/",
      "files": [
        "stampit.full.js",
        "stampit.full.min.js"
      ]
    }
  ],
  "babel": {
    "plugins": [
      "babel-plugin-transform-es2015-template-literals",
      "babel-plugin-transform-es2015-literals",
      "babel-plugin-transform-es2015-function-name",
      "babel-plugin-transform-es2015-arrow-functions",
      "babel-plugin-transform-es2015-block-scoped-functions",
      "babel-plugin-transform-es2015-classes",
      "babel-plugin-transform-es2015-object-super",
      "babel-plugin-transform-es2015-shorthand-properties",
      "babel-plugin-transform-es2015-duplicate-keys",
      "babel-plugin-transform-es2015-computed-properties",
      "babel-plugin-transform-es2015-for-of",
      "babel-plugin-transform-es2015-sticky-regex",
      "babel-plugin-transform-es2015-unicode-regex",
      "babel-plugin-check-es2015-constants",
      "babel-plugin-transform-es2015-spread",
      "babel-plugin-transform-es2015-parameters",
      "babel-plugin-transform-es2015-destructuring",
      "babel-plugin-transform-es2015-block-scoping",
      [
        "babel-plugin-transform-regenerator",
        {
          "async": false,
          "asyncGenerators": false
        }
      ]
    ]
  },
  "readme": "<img src=\"https://raw.githubusercontent.com/stampit-org/stampit-logo/master/stampit-logo.png\" alt=\"stampit\" width=\"160\" />\n\n# Stampit [![Travis-CI](https://travis-ci.org/stampit-org/stampit.svg)](https://travis-ci.org/stampit-org/stampit) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/stampit-org/stampit?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Twitter Follow](https://img.shields.io/twitter/follow/stampit.svg?style=social&label=Follow&maxAge=2592000)](https://twitter.com/stampit_org)\n\n**Create objects from reusable, composable behaviors** \n \nStamps are [standardised](https://github.com/stampit-org/stamp-specification) composable factory functions. **Stampit** is an [infected compose](https://medium.com/@koresar/fun-with-stamps-episode-8-tracking-and-overriding-composition-573aa85ba622) featuring friendly handy API.\n\n \n## Simplest Example\n\n```js\nconst MyStamp = stampit()       // create new empty stamp\n.props({                        // add properties to your future objects\n  myProp: 'default value'\n})\n.methods({                      // add methods to your future objects\n  getMyProp() {\n    return this.myProp;\n  }\n})\n.init(function ({value}) {      // add initializers to your future objects\n  this.myProp = value || this.myProp;\n})\n.compose(AnotherStamp);         // add other stamp behaviours to your objects\n\nconsole.log(typeof MyStamp);                   // 'function'\nconsole.log(MyStamp());                        // { myProp: 'default value' }\n\nconsole.log(typeof MyStamp().getMyProp);       // 'function'\nconsole.log(MyStamp().getMyProp());            // default value\n\nconsole.log(MyStamp('new value'));             // { myProp: 'new value' }\nconsole.log(MyStamp('new value').getMyProp()); // new value\n```\n\nStampit uses [three different kinds of prototypal OO](https://vimeo.com/69255635) to let you inherit behavior in a way that is much more powerful and flexible than classical OO.\n\n\n## Status\n\n* **v1**. `npm i stampit@1`\n* **v2**. `npm i stampit@2` [Breaking changes](https://github.com/stampit-org/stampit/releases/tag/2.0)\n* **v3**. `npm i stampit` [Breaking changes](https://github.com/stampit-org/stampit/releases/tag/3.0). Compatible with the [stamp specification](https://github.com/stampit-org/stamp-specification)\n\n\n## Install\n\n[![NPM](https://nodei.co/npm/stampit.png)](https://www.npmjs.com/package/stampit)\n\nBrowsers: [![CDNJS](https://img.shields.io/badge/cdnjs.com--green.svg)](https://cdnjs.com/libraries/stampit)\n[![UNPKG](https://img.shields.io/badge/unpkg.com--green.svg)](https://unpkg.com/stampit)\n\n## API\n\nSee the [API](docs/API.md).\n\n\n# What's the Point?\n\nPrototypal OO is great, and JavaScript's capabilities give us some really powerful tools to explore it, but it could be easier to use.\n\nBasic questions like \"how do I inherit privileged methods and private data?\" and \n\"what are some good alternatives to inheritance hierarchies?\" are stumpers for many JavaScript users.\n\nLet's answer both of these questions at the same time.\n\n```js\n// Some privileged methods with some private data.\nconst Availability = stampit().init(function() {\n  var isOpen = false; // private\n\n  this.open = function open() {\n    isOpen = true;\n    return this;\n  };\n  this.close = function close() {\n    isOpen = false;\n    return this;\n  };\n  this.isOpen = function isOpenMethod() {\n    return isOpen;\n  }\n});\n\n// Here's a stamp with public methods, and some state:\nconst Membership = stampit({\n  methods: {\n    add(member) {\n      this.members[member.name] = member;\n      return this;\n    },\n    getMember(name) {\n      return this.members[name];\n    }\n  },\n  properties: {\n    members: {}\n  }\n});\n\n// Let's set some defaults:\nconst Defaults = stampit({\n  init({name, specials}) {\n    this.name = name || this.name;\n    this.specials = specials || this.specials;\n  },\n  properties: {\n    name: 'The Saloon',\n    specials: 'Whisky, Gin, Tequila'\n  }\n});\n\n// Classical inheritance has nothing on this.\n// No parent/child coupling. No deep inheritance hierarchies.\n// Just good, clean code reusability.\nconst Bar = stampit(Defaults, Availability, Membership);\n\n// Create an object instance\nconst myBar = Bar({name: 'Moe\\'s'});\n\n// Silly, but proves that everything is as it should be.\nmyBar.add({name: 'Homer'}).open().getMember('Homer');\n```\n\nFor more examples see the [API](docs/API.md).\n\n\n# More info\n\nStampit was written as an example for the book, [\"Programming JavaScript Applications\" (O'Reilly)](http://pjabook.com). See [this page](https://github.com/stampit-org/stampit/blob/master/docs/pjabook-updated-examples.md) to make book examples work with the latest stampit.\n\nLooking for a deep dive into prototypal OO, stamps, and the Two Pillars of JavaScript? [Learn JavaScript with Eric Elliott](https://ericelliottjs.com).\n\n**React Users.** Stampit *loves* React. Check out [react-stamp](https://github.com/stampit-org/react-stamp) for composable components.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/stampit-org/stampit/issues"
  },
  "_id": "stampit@3.0.2",
  "_from": "stampit@"
}
