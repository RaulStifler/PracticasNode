{"version":3,"file":null,"sources":["../src/isObject.js","../src/isFunction.js","../src/extract-functions.js","../src/isPlainObject.js","../src/merge.js","../src/standardise-descriptor.js","../src/compose.js","../src/isStamp.js","../src/stampit.js"],"sourcesContent":["export default function isObject(obj) {\n  const type = typeof obj;\n  return !!obj && (type === 'object' || type === 'function');\n}\n","export default function isFunction(obj) {\n  return typeof obj === 'function';\n}\n","import isFunction from './isFunction';\n\nexport default function (...args) {\n  let result = [];\n  for (let i = 0; i < args.length; i += 1) {\n    const arg = args[i];\n    if (isFunction(arg)) result.push(arg);\n    else if (Array.isArray(arg)) result = result.concat(arg.filter(isFunction));\n  }\n  return result.length === 0 ? undefined : result;\n}\n","export default function isPlainObject(value) {\n  return !!value && typeof value === 'object' &&\n    Object.getPrototypeOf(value) === Object.prototype;\n}\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\n\n/**\n * The 'src' argument plays the command role.\n * The returned values is always of the same type as the 'src'.\n * @param dst\n * @param src\n * @returns {*}\n */\nfunction mergeOne(dst, src) {\n  if (src === undefined) return dst;\n\n  // According to specification arrays must be concatenated.\n  // Also, the '.concat' creates a new array instance. Overrides the 'dst'.\n  if (Array.isArray(src)) return (Array.isArray(dst) ? dst : []).concat(src);\n\n  // Now deal with non plain 'src' object. 'src' overrides 'dst'\n  // Note that functions are also assigned! We do not deep merge functions.\n  if (!isPlainObject(src)) return src;\n\n  // See if 'dst' is allowed to be mutated. If not - it's overridden with a new plain object.\n  const returnValue = isObject(dst) ? dst : {};\n\n  const keys = Object.keys(src);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n\n    const srcValue = src[key];\n    // Do not merge properties with the 'undefined' value.\n    if (srcValue !== undefined) {\n      const dstValue = returnValue[key];\n      // Recursive calls to mergeOne() must allow only plain objects or arrays in dst\n      const newDst = isPlainObject(dstValue) || Array.isArray(srcValue) ? dstValue : {};\n\n      // deep merge each property. Recursion!\n      returnValue[key] = mergeOne(newDst, srcValue);\n    }\n  }\n\n  return returnValue;\n}\n\nexport default function (dst, ...srcs) {\n  return srcs.reduce(mergeOne, dst);\n}\n","import isObject from './isObject';\nimport extractFunctions from './extract-functions';\nimport merge from './merge';\n\nconst assign = Object.assign;\n\nexport default function ({\n  methods,\n\n  properties,\n  props,\n  refs,\n\n  initializers,\n  init,\n\n  deepProperties,\n  deepProps,\n\n  propertyDescriptors,\n\n  staticProperties,\n  statics,\n\n  staticDeepProperties,\n  deepStatics,\n\n  staticPropertyDescriptors,\n\n  configuration,\n  conf,\n\n  deepConfiguration,\n  deepConf\n} = {}) {\n  const p = isObject(props) || isObject(refs) || isObject(properties) ?\n    assign({}, props, refs, properties) : undefined;\n\n  let dp = isObject(deepProps) ? merge({}, deepProps) : undefined;\n  dp = isObject(deepProperties) ? merge(dp, deepProperties) : dp;\n\n  const sp = isObject(statics) || isObject(staticProperties) ?\n    assign({}, statics, staticProperties) : undefined;\n\n  let dsp = isObject(deepStatics) ? merge({}, deepStatics) : undefined;\n  dsp = isObject(staticDeepProperties) ? merge(dsp, staticDeepProperties) : dsp;\n\n  const c = isObject(conf) || isObject(configuration) ?\n    assign({}, conf, configuration) : undefined;\n\n  let dc = isObject(deepConf) ? merge({}, deepConf) : undefined;\n  dc = isObject(deepConfiguration) ? merge(dc, deepConfiguration) : dc;\n\n  return {\n    methods,\n    properties: p,\n    initializers: extractFunctions(init, initializers),\n    deepProperties: dp,\n    staticProperties: sp,\n    staticDeepProperties: dsp,\n    propertyDescriptors,\n    staticPropertyDescriptors,\n    configuration: c,\n    deepConfiguration: dc\n  };\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\nimport isComposable from './isComposable';\nimport merge from './merge';\n\nconst assign = Object.assign;\n\n/**\n * Creates new factory instance.\n * @param {object} descriptor The information about the object the factory will be creating.\n * @returns {Function} The new factory function.\n */\nfunction createFactory(descriptor) {\n  return function Stamp(options, ...args) {\n    const obj = Object.create(descriptor.methods || {});\n\n    merge(obj, descriptor.deepProperties);\n    assign(obj, descriptor.properties);\n    Object.defineProperties(obj, descriptor.propertyDescriptors || {});\n\n    if (!descriptor.initializers || descriptor.initializers.length === 0) return obj;\n\n    if (options === undefined) options = {};\n    return descriptor.initializers.filter(isFunction).reduce((resultingObj, initializer) => {\n      const returnedValue = initializer.call(resultingObj, options,\n        {instance: resultingObj, stamp: Stamp, args: [options].concat(args)});\n      return returnedValue === undefined ? resultingObj : returnedValue;\n    }, obj);\n  };\n}\n\n/**\n * Returns a new stamp given a descriptor and a compose function implementation.\n * @param {object} [descriptor={}] The information about the object the stamp will be creating.\n * @param {Function} composeFunction The \"compose\" function implementation.\n * @returns {Function}\n */\nfunction createStamp(descriptor, composeFunction) {\n  const Stamp = createFactory(descriptor);\n\n  merge(Stamp, descriptor.staticDeepProperties);\n  assign(Stamp, descriptor.staticProperties);\n  Object.defineProperties(Stamp, descriptor.staticPropertyDescriptors || {});\n\n  const composeImplementation = isFunction(Stamp.compose) ? Stamp.compose : composeFunction;\n  Stamp.compose = function _compose(...args) {\n    return composeImplementation.apply(this, args);\n  };\n  assign(Stamp.compose, descriptor);\n\n  return Stamp;\n}\n\n/**\n * Mutates the dstDescriptor by merging the srcComposable data into it.\n * @param {object} dstDescriptor The descriptor object to merge into.\n * @param {object} [srcComposable] The composable (either descriptor or stamp) to merge data form.\n * @returns {object} Returns the dstDescriptor argument.\n */\nfunction mergeComposable(dstDescriptor, srcComposable) {\n  const srcDescriptor = (srcComposable && srcComposable.compose) || srcComposable;\n  if (!isComposable(srcDescriptor)) return dstDescriptor;\n\n  const combineProperty = (propName, action) => {\n    if (!isObject(srcDescriptor[propName])) return;\n    if (!isObject(dstDescriptor[propName])) dstDescriptor[propName] = {};\n    action(dstDescriptor[propName], srcDescriptor[propName]);\n  };\n\n  combineProperty('methods', assign);\n  combineProperty('properties', assign);\n  combineProperty('deepProperties', merge);\n  combineProperty('propertyDescriptors', assign);\n  combineProperty('staticProperties', assign);\n  combineProperty('staticDeepProperties', merge);\n  combineProperty('staticPropertyDescriptors', assign);\n  combineProperty('configuration', assign);\n  combineProperty('deepConfiguration', merge);\n  if (Array.isArray(srcDescriptor.initializers)) {\n    dstDescriptor.initializers = srcDescriptor.initializers.reduce((result, init) => {\n      if (isFunction(init) && result.indexOf(init) < 0) {\n        result.push(init);\n      }\n      return result;\n    }, Array.isArray(dstDescriptor.initializers) ? dstDescriptor.initializers : []);\n  }\n\n  return dstDescriptor;\n}\n\n/**\n * Given the list of composables (stamp descriptors and stamps) returns\n * a new stamp (composable factory function).\n * @param {...(object|Function)} [composables] The list of composables.\n * @returns {Stamp} A new stamp (aka composable factory function)\n */\nexport default function compose(...composables) {\n  const descriptor = [this]\n    .concat(composables)\n    .filter(isObject)\n    .reduce(mergeComposable, {});\n  return createStamp(descriptor, compose);\n}\n\n\n/**\n * The Stamp Descriptor\n * @typedef {Function|Object} Descriptor\n * @returns {Stamp} A new stamp based on this Stamp\n * @property {Object} [methods] Methods or other data used as object instances' prototype\n * @property {Array<Function>} [initializers] List of initializers called for each object instance\n * @property {Object} [properties] Shallow assigned properties of object instances\n * @property {Object} [deepProperties] Deeply merged properties of object instances\n * @property {Object} [staticProperties] Shallow assigned properties of Stamps\n * @property {Object} [staticDeepProperties] Deeply merged properties of Stamps\n * @property {Object} [configuration] Shallow assigned properties of Stamp arbitrary metadata\n * @property {Object} [deepConfiguration] Deeply merged properties of Stamp arbitrary metadata\n * @property {Object} [propertyDescriptors] ES5 Property Descriptors applied to object instances\n * @property {Object} [staticPropertyDescriptors] ES5 Property Descriptors applied to Stamps\n */\n\n/**\n * The Stamp factory function\n * @typedef {Function} Stamp\n * @returns {*} Instantiated object\n * @property {Descriptor} compose - The Stamp descriptor and composition function\n */\n","import isFunction from './isFunction';\n\nexport default function isStamp(obj) {\n  return isFunction(obj) && isFunction(obj.compose);\n}\n","import standardiseDescriptor from './standardise-descriptor';\nimport extractFunctions from './extract-functions';\nimport merge from './merge';\nimport compose from './compose';\nimport isComposable from './isComposable';\nimport isStamp from './isStamp';\n\nconst assign = Object.assign;\n\nfunction createUtilityFunction(propName, action) {\n  return function composeUtil() {\n    const descriptor = {};\n    descriptor[propName] = action({}, ...arguments);\n    return ((this && this.compose) || stampit).call(this, descriptor);\n  };\n}\n\nexport const methods = createUtilityFunction('methods', assign);\n\nexport const properties = createUtilityFunction('properties', assign);\nexport {properties as refs};\nexport {properties as props};\n\nexport function initializers(...args) {\n  return ((this && this.compose) || stampit).call(this, {\n    initializers: extractFunctions(...args)\n  });\n}\nexport {initializers as init};\n\nexport const deepProperties = createUtilityFunction('deepProperties', merge);\nexport {deepProperties as deepProps};\n\nexport const staticProperties = createUtilityFunction('staticProperties', assign);\nexport {staticProperties as statics};\n\nexport const staticDeepProperties = createUtilityFunction('staticDeepProperties', merge);\nexport {staticDeepProperties as deepStatics};\n\nexport const configuration = createUtilityFunction('configuration', assign);\nexport {configuration as conf};\n\nexport const deepConfiguration = createUtilityFunction('deepConfiguration', merge);\nexport {deepConfiguration as deepConf};\n\nexport const propertyDescriptors = createUtilityFunction('propertyDescriptors', assign);\n\nexport const staticPropertyDescriptors = createUtilityFunction('staticPropertyDescriptors', assign);\n\nconst allUtilities = {\n  methods,\n\n  properties,\n  refs: properties,\n  props: properties,\n\n  initializers,\n  init: initializers,\n\n  deepProperties,\n  deepProps: deepProperties,\n\n  staticProperties,\n  statics: staticProperties,\n\n  staticDeepProperties,\n  deepStatics: staticDeepProperties,\n\n  configuration,\n  conf: configuration,\n\n  deepConfiguration,\n  deepConf: deepConfiguration,\n\n  propertyDescriptors,\n\n  staticPropertyDescriptors\n};\n\n/**\n * Infected stamp. Used as a storage of the infection metadata\n * @type {Function}\n * @return {Stamp}\n */\nconst baseStampit = compose(\n  {staticProperties: allUtilities},\n  {\n    staticProperties: {\n      create(...args) {\n        return this(...args);\n      },\n      compose: stampit // infecting\n    }\n  }\n);\n\n/**\n * Infected compose\n * @return {Stamp}\n */\nfunction stampit(...args) {\n  args = args.filter(isComposable)\n    .map(arg => isStamp(arg) ? arg : standardiseDescriptor(arg));\n\n  // Calling the standard pure compose function here.\n  return compose.apply(this || baseStampit, args);\n}\n\nconst exportedCompose = stampit.bind(); // bind to 'undefined'\nexport {exportedCompose as compose};\nstampit.compose = exportedCompose;\n\n// Setting up the shortcut functions\nexport default assign(stampit, allUtilities);\n"],"names":["isObject","obj","type","isFunction","args","result","i","length","arg","push","Array","isArray","concat","filter","undefined","isPlainObject","value","Object","getPrototypeOf","prototype","mergeOne","dst","src","returnValue","keys","key","srcValue","dstValue","newDst","srcs","reduce","assign","p","props","refs","properties","dp","deepProps","merge","deepProperties","sp","statics","staticProperties","dsp","deepStatics","staticDeepProperties","c","conf","configuration","dc","deepConf","deepConfiguration","extractFunctions","init","initializers","createFactory","descriptor","Stamp","options","create","methods","defineProperties","propertyDescriptors","resultingObj","initializer","returnedValue","call","instance","stamp","createStamp","composeFunction","staticPropertyDescriptors","composeImplementation","compose","_compose","apply","mergeComposable","dstDescriptor","srcComposable","srcDescriptor","isComposable","combineProperty","propName","action","indexOf","composables","isStamp","createUtilityFunction","composeUtil","arguments","stampit","allUtilities","baseStampit","map","standardiseDescriptor","exportedCompose","bind"],"mappings":"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"}